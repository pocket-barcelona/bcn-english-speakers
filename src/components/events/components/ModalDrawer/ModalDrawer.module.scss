$animationDurationSecs: 0.5s;
$backDropBackground: rgba(23, 23, 26, 0.5);
$backDropBackgroundAlmostOpaque: rgba(23, 23, 26, 0.9);
$dialogHeights: 25, 33, 50, 66, 75, 87, 100;

@mixin dialogMaxHeight($height) {
  max-height: #{$height}dvh;
}

:global {
  // Stop background scrolling when dialog is open
  html:has(dialog[open]) {
    overflow: hidden;
  }
}

// presented as a drawer
.drawer {
  width: 100vw;
  max-width: none;
  max-height: none;
  height: 100vh; // Safari needs a height
  margin-top: auto;
  margin-bottom: 0;
  border: none;
  border-radius: 1rem 1rem 0 0;
  background: #fff;
  padding: 0;

  &[open] {
    animation: showDrawer $animationDurationSecs ease normal;

    @media (prefers-reduced-motion) {
      animation: none;
    }
  }

  &::backdrop {
    animation: backdropShowDrawer $animationDurationSecs ease forwards;

    @media (prefers-reduced-motion) {
      animation: none;
    }
  }

  @media screen and (max-width: 767px) {
    background: #f3f3f3ff;
    // build mobile dialog height classes from vars
    @each $height in $dialogHeights {
      &.h#{$height} {
        @include dialogMaxHeight($height);
      }
    }
  }

  &.isClosing.isClosing {
    animation: hideDrawer $animationDurationSecs ease normal;
  
    @media (prefers-reduced-motion) {
      animation: hideDrawer 1ms; // 1ms allows the `endanimation` event to fire
    }
  
    &::backdrop {
      animation: backdropHideDrawer $animationDurationSecs ease forwards;
  
      @media (prefers-reduced-motion) {
        animation: none;
      }
    }
  }
  
}

// presented as a modal
.modal {
  width: min(680px, 100vw);
  max-width: none;
  max-height: none;
  height: clamp(80vh, 60vh, 600px); // Safari needs a height
  margin: auto;
  border: none;
  border-radius: 1rem 1rem 0 0;
  background: #fff;
  padding: 0;

  &[open] {
    animation: showModal $animationDurationSecs ease normal;

    @media (prefers-reduced-motion) {
      animation: none;
    }
  }

  &::backdrop {
    animation: backdropShowModal $animationDurationSecs ease forwards;

    @media (prefers-reduced-motion) {
      animation: none;
    }
  }

  @media screen and (max-width: 767px) {
    background: #f3f3f3ff;
    // build mobile dialog height classes from vars
    @each $height in $dialogHeights {
      &.h#{$height} {
        @include dialogMaxHeight($height);
      }
    }
  }
}


// drawer animations
@keyframes showDrawer {
  from {
    transform: translateY(100%);
    display: none;
  }
  to {
    transform: translateY(0%);
    display: block;
  }
}

@keyframes hideDrawer {
  from {
    transform: translateY(0%);
    display: block;
  }
  to {
    transform: translateY(100%);
    display: none;
  }
}

@keyframes backdropShowDrawer {
  from {
    background: none;
  }

  to {
    background: $backDropBackground;
  }
}

@keyframes backdropHideDrawer {
  from {
    background: $backDropBackground;
  }

  to {
    background: none;
  }
}

// modal animations
@keyframes showModal {
  from {
    transform: translateY(100%);
    display: none;
  }
  to {
    transform: translateY(0%);
    display: block;
  }
}

@keyframes hideModal {
  from {
    transform: translateY(0%);
    display: block;
  }
  to {
    transform: translateY(100%);
    display: none;
  }
}

@keyframes backdropShowModal {
  from {
    background: none;
  }

  to {
    background: $backDropBackgroundAlmostOpaque;
  }
}

@keyframes backdropHideModal {
  from {
    background: $backDropBackgroundAlmostOpaque;
  }

  to {
    background: none;
  }
}



// ----------- Desktop Overrides ---------------

@media screen and (min-width: 768px) {
  .drawer {
    margin-right: 0;
    margin-left: auto;
    max-height: 100vh;
    height: 100vh;
    width: 520px;
    border-radius: 16px 0 0 16px;
    padding: 0;
  }
  .modal {
    // @todo
  }

  @keyframes showDrawer {
    from {
      transform: translateX(100%);
      display: none;
    }
    to {
      transform: translateX(0%);
      display: block;
    }
  }

  @keyframes hideDrawer {
    from {
      transform: translateX(0%);
      display: block;
    }
    to {
      transform: translateX(100%);
      display: none;
    }
  }

}
